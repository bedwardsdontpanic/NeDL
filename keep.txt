using System;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;

namespace BenTestingStuff
{
    class MySqlCreate
    {
        static async Task Main(string[] args)
        {
            var builder = new MySqlConnectionStringBuilder
            {
                Server = "bentestingstuff.mysql.database.azure.com",
                Database = "ben",
                UserID = "benjedwrds",
                Password = "ZBE3012.",
                SslMode = MySqlSslMode.Required,
            };

            using (var conn = new MySqlConnection(builder.ConnectionString))
            {
                Console.WriteLine("Opening connection");
                await conn.OpenAsync();

                using (var command = conn.CreateCommand())
                {
                    command.CommandText = "DROP TABLE IF EXISTS highScores;";
                    await command.ExecuteNonQueryAsync();
                    Console.WriteLine("Finished dropping table (if existed)");

                    command.CommandText = "CREATE TABLE highScores (id serial PRIMARY KEY, name VARCHAR(50), score INTEGER);";
                    await command.ExecuteNonQueryAsync();
                    Console.WriteLine("Finished creating table");

                    command.CommandText = @"INSERT INTO highScores (name, score) VALUES (@name1, @score1),
                        (@name2, @score2), (@name3, @score3);";
                    command.Parameters.AddWithValue("@name1", "Jim");
                    command.Parameters.AddWithValue("@score1", 150);
                    command.Parameters.AddWithValue("@name2", "Bob");
                    command.Parameters.AddWithValue("@score2", 154);
                    command.Parameters.AddWithValue("@name3", "Jimbo");
                    command.Parameters.AddWithValue("@score3", 100);

                    int rowCount = await command.ExecuteNonQueryAsync();
                    Console.WriteLine(String.Format("Number of rows inserted={0}", rowCount));
                }

                // connection will be closed by the 'using' block
                Console.WriteLine("Closing connection");
            }

            Console.WriteLine("Press RETURN to exit");
            Console.ReadLine();
        }
    }
}



Data Source=tcp:bensprojectdbserver.database.windows.net,1433;Initial Catalog=BensProjectdb;User Id=benj.edwrds@bensprojectdbserver;Password=ZBE3012.



using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Azure.Identity;
using Microsoft.Data.SqlClient;
using Azure.Security.KeyVault.Secrets;

namespace BensProject
{
    public class Program
    {
        public static void Main(string[] args)
        {
            try
            {
                SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();
                builder.DataSource = "bensprojectdbserver.database.windows.net";
                builder.UserID = "benj.edwrds";
                builder.Password = "ZBE3012.";
                builder.InitialCatalog = "BensProjectdb";
                var tenantId = "a4cb79c3-7e45-45d0-8335-29edefd7e9f8";
                Environment.SetEnvironmentVariable("AZURE_TENANT_ID", tenantId);

                DefaultAzureCredentialOptions options = new DefaultAzureCredentialOptions()
                {
                    VisualStudioTenantId = tenantId,
                    SharedTokenCacheTenantId = tenantId
                };

                using (SqlConnection connection = new SqlConnection(builder.ConnectionString))
                {
                    Console.WriteLine("\nQuery data example:");
                    Console.WriteLine("=========================================\n");

                    String sql = "SELECT name, collation_name FROM sys.databases";

                    using (SqlCommand command = new SqlCommand(sql, connection))
                    {
                        connection.Open();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                Console.WriteLine("{0} {1}", reader.GetString(0), reader.GetString(1));
                            }
                        }
                    }
                }
            }
            catch (SqlException e)
            {
                Console.WriteLine(e.ToString());
            }
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>  Host.CreateDefaultBuilder(args)
        .ConfigureAppConfiguration((context, config) =>
            {
 //               var keyVaultEndpoint = new Uri("https://bensprojectvault.vault.azure.net/");
                var keyVaultEndpoint = new Uri(Environment.GetEnvironmentVariable("VaultUri"));
                config.AddAzureKeyVault(keyVaultEndpoint, new DefaultAzureCredential());
            })
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.UseStartup<Startup>();
            });
            }
}

































        [HttpGet]
        public IEnumerable<HighScore> Get()
        {
            HighScore[] theScores = new HighScore[10];
            try
            {
                SqlConnectionStringBuilder builder = Helpers.startConnection();

                using (SqlConnection connection = new SqlConnection(builder.ConnectionString))
                {

                    String sql = "SELECT name, score FROM [dbo].[HighScores]";

                    using (SqlCommand command = new SqlCommand(sql, connection))
                    {
                        connection.Open();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                Console.WriteLine(reader.GetString(0), reader.GetDecimal(1));
                                theScores = Enumerable.Range(1, 10).Select(index => new HighScore
                                {
                                    name = reader.GetString(0),
                                    score = reader.GetDecimal(1)
                                })
                                .ToArray();
                            }
                        }
                    }
                }
            }

            catch (SqlException e)
            {
                Console.WriteLine(e.ToString());
            }

            return theScores;
        }
